cohen.d(Proportiondata$ShortDelay,Proportiondata$MediumDelay)
p3 = t.test(Proportiondata$MediumDelay,Proportiondata$LongDelay, paired = TRUE)
cohen.d(Proportiondata$MediumDelay,Proportiondata$LongDelay)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
p2
p1
## ttest in comparison onset (early, ontime, late)
p1 = t.test(Proportiondata$Early,Proportiondata$Ontime, paired = TRUE)
cohen.d(Proportiondata$Early,Proportiondata$Ontime)
p2 = t.test(Proportiondata$Early,Proportiondata$Late, paired = TRUE)
cohen.d(Proportiondata$Early,Proportiondata$Late)
p3 = t.test(Proportiondata$Late,Proportiondata$Ontime, paired = TRUE)
cohen.d(Proportiondata$Late,Proportiondata$Ontime)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
p1
p2
p3
## Pairwise comparison for interaction effects
# Proportion_short
# Short condition
p1 = t.test(Proportiondata$Early.Shortdelay,Proportiondata$Ontime.Shortdelay, paired = TRUE) # Early vs Ontime in short condition
cohen.d(Proportiondata$Early.Shortdelay,Proportiondata$Ontime.Shortdelay)
p2 = t.test(Proportiondata$Early.Shortdelay,Proportiondata$Late.Shortdelay, paired = TRUE) # Early vs Late in short condition
cohen.d(Proportiondata$Early.Shortdelay,Proportiondata$Late.Shortdelay)
p3 = t.test(Proportiondata$Ontime.Shortdelay,Proportiondata$Late.Shortdelay, paired = TRUE) # Late vs Ontime in short condition
cohen.d(Proportiondata$Ontime.Shortdelay,Proportiondata$Late.Shortdelay)
p.adjust(p1[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p.adjust(p2[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in short condition
p.adjust(p3[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in short condition
p1
p2
p3
# Medium condition
p4 = t.test(Proportiondata$Early.Mediumdelay,Proportiondata$Ontime.Mediumdelay, paired = TRUE) # Early vs Ontime in short condition
cohen.d(Proportiondata$Early.Mediumdelay,Proportiondata$Ontime.Mediumdelay)
p5 = t.test(Proportiondata$Early.Mediumdelay,Proportiondata$Late.Mediumdelay, paired = TRUE) # Early vs Late in short condition
cohen.d(Proportiondata$Early.Mediumdelay,Proportiondata$Late.Mediumdelay)
p6 = t.test(Proportiondata$Ontime.Mediumdelay,Proportiondata$Late.Mediumdelay, paired = TRUE) # Late vs Ontime in short condition
cohen.d(Proportiondata$Ontime.Mediumdelay,Proportiondata$Late.Mediumdelay)
p.adjust(p4[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in long condition
p.adjust(p5[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in long condition
p.adjust(p6[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in long condition
p4
p5
p6
# Long condition
p7 = t.test(Proportiondata$Early.Longdelay,Proportiondata$Ontime.Longdelay, paired = TRUE) # Early vs Ontime in long condition
p8 = t.test(Proportiondata$Early.Longdelay,Proportiondata$Late.Longdelay, paired = TRUE) # Early vs Late in long condition
p9 = t.test(Proportiondata$Ontime.Longdelay,Proportiondata$Late.Longdelay, paired = TRUE) # Late vs Ontime in long condition
p.adjust(p7[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in long condition
p.adjust(p8[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in long condition
p.adjust(p9[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in long condition
p1 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Long))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
p1
##### PSE ####
PSEdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/PSE.csv')
long_PSEdata <- gather(PSEdata,BD,PSE,Early.Shortdelay:Late.Longdelay)
separate_PSEdata <- separate(long_PSEdata, BD, c("Comparison_onsets", "Delay_length"))
##### PSE ####
PSEdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/PSE.csv')
long_PSEdata <- gather(PSEdata,BD,PSE,Early.Shortdelay:Late.Longdelay)
separate_PSEdata <- separate(long_PSEdata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
PSE_F = summary(aov(PSE ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_PSEdata))
PSE_F
## ttest in comparison onset (early, ontime, late)
p1 = t.test(PSEdata$Early,PSEdata$Ontime, paired = TRUE)
cohen.d(PSEdata$Early,PSEdata$Ontime)
p2 = t.test(PSEdata$Early,PSEdata$Late, paired = TRUE)
cohen.d(PSEdata$Early,PSEdata$Late)
p3 = t.test(PSEdata$Late,PSEdata$Ontime, paired = TRUE)
cohen.d(PSEdata$Late,PSEdata$Ontime)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
p1
p2
p3
## ttest in delay length (short, medium, long)
p1 = t.test(PSEdata$ShortDelay,PSEdata$LongDelay, paired = TRUE)
cohen.d(PSEdata$ShortDelay,PSEdata$LongDelay)
p2 = t.test(PSEdata$ShortDelay,PSEdata$MediumDelay, paired = TRUE)
cohen.d(PSEdata$ShortDelay,PSEdata$MediumDelay)
p3 = t.test(PSEdata$MediumDelay,PSEdata$LongDelay, paired = TRUE)
cohen.d(PSEdata$MediumDelay,PSEdata$LongDelay)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
p2
p1
# Simple main effect
PSE_Long = separate_PSEdata %>%
filter(Delay_length =='Longdelay')
p1 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Long))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
PSE_Medium = separate_PSEdata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
PSE_Short = separate_PSEdata %>%
filter(Delay_length =='Shortdelay')
p3 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Short))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p3
p2
p1
## Pairwise comparison for interaction effects
# Proportion_short
# Short condition
p1 = t.test(PSEdata$Early.Shortdelay,PSEdata$Ontime.Shortdelay, paired = TRUE) # Early vs Ontime in short condition
cohen.d(PSEdata$Early.Shortdelay,PSEdata$Ontime.Shortdelay)
p2 = t.test(PSEdata$Early.Shortdelay,PSEdata$Late.Shortdelay, paired = TRUE) # Early vs Late in short condition
cohen.d(PSEdata$Early.Shortdelay,PSEdata$Late.Shortdelay)
p3 = t.test(PSEdata$Ontime.Shortdelay,PSEdata$Late.Shortdelay, paired = TRUE) # Late vs Ontime in short condition
cohen.d(PSEdata$Ontime.Shortdelay,PSEdata$Late.Shortdelay)
p.adjust(p1[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p.adjust(p2[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in short condition
p.adjust(p3[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in short condition
p1
p2
p3
# Medium condition
p4 = t.test(PSEdata$Early.Mediumdelay,PSEdata$Ontime.Mediumdelay, paired = TRUE) # Early vs Ontime in short condition
cohen.d(PSEdata$Early.Mediumdelay,PSEdata$Ontime.Mediumdelay)
p5 = t.test(PSEdata$Early.Mediumdelay,PSEdata$Late.Mediumdelay, paired = TRUE) # Early vs Late in short condition
cohen.d(PSEdata$Early.Mediumdelay,PSEdata$Late.Mediumdelay)
p6 = t.test(PSEdata$Ontime.Mediumdelay,PSEdata$Late.Mediumdelay, paired = TRUE) # Late vs Ontime in short condition
cohen.d(PSEdata$Ontime.Mediumdelay,PSEdata$Late.Mediumdelay)
p.adjust(p4[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in long condition
p.adjust(p5[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in long condition
p.adjust(p6[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in long condition
p4
p5
p6
# Long condition
p7 = t.test(PSEdata$Early.Longdelay,PSEdata$Ontime.Longdelay, paired = TRUE) # Early vs Ontime in long condition
p8 = t.test(PSEdata$Early.Longdelay,PSEdata$Late.Longdelay, paired = TRUE) # Early vs Late in long condition
p9 = t.test(PSEdata$Ontime.Longdelay,PSEdata$Late.Longdelay, paired = TRUE) # Late vs Ontime in long condition
p.adjust(p7[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in long condition
p.adjust(p8[["p.value"]], method = "bonferroni", n = 3) # Early vs Late in long condition
p.adjust(p9[["p.value"]], method = "bonferroni", n = 3) # Late vs Ontime in long condition
## Reshape my data
library(effsize)
library(tidyr)
library(dplyr)
setwd('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata')
##### Accuracy ####
Accdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/Accuracy.csv')
long_Accdata <- gather(Accdata,BD,Accuracy,Early.Shortdelay:Late.Longdelay)
separate_Accdata <- separate(long_Accdata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
Acc_F = summary（aov(Accuracy ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata)）
## Run repeated measure ANOVA
# main effect & interaction
Acc_F = summary(aov(Accuracy ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
Acc_F
summary(aov(Accuracy ~ Comparison_onsets + Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
summary(aov(Accuracy ~ Delay_length + Comparison_onsets + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
anova(lm(Accuracy ~ Delay_length + Comparison_onsets + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
anova(lm(Accuracy ~ Delay_length + Comparison_onsets), data = separate_Accdata))
anova(lm(Accuracy ~ Delay_length + Comparison_onsets, data = separate_Accdata))
anova(lm(Accuracy ~ Comparison_onsets + Delay_length, data = separate_Accdata))
View(separate_Accdata)
data()
data(mtcars)
mtcars
data("PlantGrowth")
force(PlantGrowth)
View(PlantGrowth)
lm(weight ~ group,data = PlantGrowth)
summary(lm(weight ~ group,data = PlantGrowth))
data("iris")
force(iris)
View(iris)
##### Accuracy ####
Accdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/Accuracy.csv')
long_Accdata <- gather(Accdata,BD,Accuracy,Early.Shortdelay:Late.Longdelay)
separate_Accdata <- separate(long_Accdata, BD, c("Comparison_onsets", "Delay_length"))
View(separate_Accdata)
anova(lm(Accuracy ~ Conparison_onsets + Delay_length))
anova(lm(Accuracy ~ Conparison_onsets + Delay_length, data = separate_Accdata))
anova(lm(Accuracy ~ Comparison_onsets + Delay_length, data = separate_Accdata))
summary(aov(Accuracy ~ Comparison_onsets + Delay_length, data = separate_Accdata))
summary(aov(Accuracy ~ Delay_length + Comparison_onsets, data = separate_Accdata))
library(lme4)
library(lmerTest)
library(tidyverse)
library(broom)
#Set working directory (where the data file is)
setwd("/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp1/data_analysis/Rdata")
#Import data
# mydata = read.csv('learning_effect.csv')
mydata = read.csv('new_learning_effect.csv')
str(mydata) #data inspection, you should see that all the variables are "int" they need to be centered and scaled
# filter the first block
mydata = mydata %>%
filter((Delay_length == 2 & Present_order == 1) | (Delay_length == 4 & Present_order == 2))
View(mydata)
mydata = mydata %>%
Delay_length = case_when(Delay_length == 2 ~ ShortDelay)
mydata = mydata %>%
mutate(test = case_when(Delay_length == 2 ~ "Short"))
#Set working directory (where the data file is)
setwd("/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp1/data_analysis/Rdata")
#Import data
# mydata = read.csv('learning_effect.csv')
mydata = read.csv('new_learning_effect.csv')
View(mydata)
mydata = mydata %>%
mutate(Delay_length = case_when(nDelay_length == 2 ~ "Short", nDelay_length == 4 ~ "Long"))
mutate(Comp_onset = case_when(nComp_onset == 5 ~ "Early", nComp_onset == 8 ~ "Ontime", nComp_onset == 9 ~ "Late"))
#Import data
# mydata = read.csv('learning_effect.csv')
mydata = read.csv('new_learning_effect.csv')
str(mydata) #data inspection, you should see that all the variables are "int" they need to be centered and scaled
mydata = mydata %>%
mutate(Delay_length = case_when(nDelay_length == 2 ~ "Short", nDelay_length == 4 ~ "Long"))
mydata = mydata %>%
mutate(Comp_onset = case_when(nComp_onset == 5 ~ "Early", nComp_onset == 8 ~ "Ontime", nComp_onset == 9 ~ "Late"))
mydata = mydata %>%
mutate(Present_order = case_when(nPresent_order == 1 ~ "short_long", nPresent_order == 2 ~ "long_short"))
#Import data
# mydata = read.csv('learning_effect.csv')
mydata = read.csv('new_learning_effect.csv')
str(mydata) #data inspection, you should see that all the variables are "int" they need to be centered and scaled
mydata = mydata %>%
mutate(Delay_length = case_when(nDelay_length == 2 ~ "Short", nDelay_length == 4 ~ "Long"))
mydata = mydata %>%
mutate(Comp_onset = case_when(nComp_onset == 5 ~ "Early", nComp_onset == 8 ~ "Ontime", nComp_onset == 9 ~ "Late"))
mydata = mydata %>%
mutate(Present_order = case_when(nPresent_order == 1 ~ "short_long", nPresent_order == 2 ~ "long_short"))
# filter the first block
mydata = mydata %>%
filter((Delay_length == "Short" & Present_order == "short_long") | (Delay_length == "Long" & Present_order == "long_short"))
# Center and scaling each variable
mydata$Trial_num = scale(mydata$Trial_num, center = TRUE, scale = TRUE)
mydata$Delay_length = scale(mydata$Delay_length, center = TRUE, scale = TRUE)
mydata$Comp_onset = scale(mydata$Comp_onset, center = TRUE, scale = TRUE)
mydata$Comp_length = scale(mydata$Comp_length, center = TRUE, scale = TRUE)
mydata$Present_order = scale(mydata$Present_order, center = TRUE, scale = TRUE)
mydata$nComp_length = scale(mydata$Comp_length, center = TRUE, scale = TRUE)
mydata$nComp_length = scale(mydata$nComp_length, center = TRUE, scale = TRUE)
# Examine the main effect of Trial_num
lm_withtrial = glmer(Correctness~Delay_length + Trial_num + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
numIters = 10000
# Examine the main effect of Trial_num
lm_withtrial = glmer(Correctness~Delay_length + Trial_num + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
lm_withouttrial = glmer(Correctness~Delay_length + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
anova(lm_withtrial,lm_withouttrial)
# Examine the interaciton between Delay_length and Trial_num
lm_withtrial = glmer(Correctness~Delay_length + Delay_length:Trial_num + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
lm_withouttrial = glmer(Correctness~Delay_length + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
anova(lm_withtrial,lm_withouttrial)
summary(lm_withtrial)
# Examine the main effect of Trial_num
lm_withtrial = glmer(Correctness~Delay_length + Trial_num + (Trial_num|Subj_num),data= mydata,family="binomial", REML=FALSE, control=glmerControl(optCtrl=list(maxfun=numIters)), verbose=2)
summary(lm_withtrial)
##### PSE ####
PSEdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/PSE.csv')
long_PSEdata <- gather(PSEdata,BD,PSE,Early.Shortdelay:Late.Longdelay)
separate_PSEdata <- separate(long_PSEdata, BD, c("Comparison_onsets", "Delay_length"))
# one sample ttest to test if the responses are different from 600
p1 = t.test(PSEdata$Early.Shortdelay,mu = 300)
(mean(PSEdata$Early.Shortdelay)-300)/sd(PSEdata$Early.Shortdelay) # cohen's d
p.adjust(p1[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p2 = t.test(PSEdata$Ontime.Shortdelay,mu = 300)
(mean(PSEdata$Ontime.Shortdelay)-300)/sd(PSEdata$Ontime.Shortdelay)
p.adjust(p2[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p3 = t.test(PSEdata$Late.Shortdelay,mu = 300)
(mean(PSEdata$Late.Shortdelay)-300)/sd(PSEdata$Late.Shortdelay)
p.adjust(p3[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p4 = t.test(PSEdata$Early.Mediumdelay,mu = 300)
(mean(PSEdata$Early.Mediumdelay)-300)/sd(PSEdata$Early.Mediumdelay) # cohen's d
p.adjust(p4[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p5 = t.test(PSEdata$Ontime.Mediumdelay,mu = 300)
(mean(PSEdata$Ontime.Mediumdelay)-300)/sd(PSEdata$Ontime.Mediumdelay)
p.adjust(p5[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p6 = t.test(PSEdata$Late.Mediumdelay,mu = 300)
(mean(PSEdata$Late.Mediumdelay)-300)/sd(PSEdata$Late.Mediumdelay)
p.adjust(p6[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p7 = t.test(PSEdata$Early.Longdelay,mu = 300)
(mean(PSEdata$Early.Longdelay)-300)/sd(PSEdata$Early.Longdelay)
p.adjust(p7[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p8 = t.test(PSEdata$Ontime.Longdelay,mu = 300)
p.adjust(p8[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p9 = t.test(PSEdata$Late.Longdelay,mu = 300)
p.adjust(p9[["p.value"]], method = "bonferroni", n = 3) # Early vs Ontime in short condition
p1
p2
p3
p6
## Reshape my data
library(effsize)
library(tidyr)
library(dplyr)
setwd('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata')
## Reshape my data
library(effsize)
library(tidyr)
library(dplyr)
setwd('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata')
##### Accuracy ####
Accdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/Accuracy.csv')
long_Accdata <- gather(Accdata,BD,Accuracy,Early.Shortdelay:Late.Longdelay)
separate_Accdata <- separate(long_Accdata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
Acc_F = summary(aov(Accuracy ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
Acc_F
Acc_F$'Error: subject:Comparison_onsets'[[1]]
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/mean(Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`)
## Two ways to test if the musicianship influences the accuracy of time perception task
# 1. parametric ANCOVA test
# 2. non-parametric permutation test
library(tidyr)
## Reshape my data
Accuracy = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/music/Accuracy.csv')
Proportiondata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/music/Proportion_short.csv')
PSEdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/music/PSE.csv')
Accuracy$Music = (scale(Accuracy$Music))
long_Accuracy <- gather(Accuracy,BD,Accuracy,Early.Shortdelay:Late.Longdelay)
separate_Accuracy <- separate(long_Accuracy, BD, c("Comparison_onsets", "Delay_length"))
Proportiondata$Music = (scale(Proportiondata$Music))
long_Proportiondata <- gather(Proportiondata,BD,Proportion_short,Early.Shortdelay:Late.Longdelay)
separate_Proportiondata <- separate(long_Proportiondata, BD, c("Comparison_onsets", "Delay_length"))
PSEdata$Music = (scale(PSEdata$Music))
long_PSEdata <- gather(PSEdata,BD,PSE,Early.Shortdelay:Late.Longdelay)
separate_PSEdata <- separate(long_PSEdata, BD, c("Comparison_onsets", "Delay_length"))
## Run ANCOVA on real data
Accuracy_result = summary(aov(Accuracy ~ Comparison_onsets * Delay_length * Music + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accuracy))
fit <- aov(Accuracy ~ Comparison_onsets * Delay_length * Music + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accuracy)
Proportion_result = summary(aov(Proportion_short ~ Comparison_onsets * Delay_length * Music + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Proportiondata))
PSE_result = summary(aov(PSE ~ Comparison_onsets * Delay_length * Music + Error(subject/(Comparison_onsets * Delay_length)), data = separate_PSEdata))
Proportion_result
PSE_result
## Reshape my data
library(effsize)
library(tidyr)
library(dplyr)
setwd('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata')
##### Accuracy ####
Accdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/Accuracy.csv')
long_Accdata <- gather(Accdata,BD,Accuracy,Early.Shortdelay:Late.Longdelay)
separate_Accdata <- separate(long_Accdata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
Acc_F = summary(aov(Accuracy ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Accdata))
Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`)
Acc_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`[1]/sum(Acc_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`)
##### Proportion Short ####
Proportiondata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/Proportion_short.csv')
long_Proportiondata <- gather(Proportiondata,BD,Proportion_short,Early.Shortdelay:Late.Longdelay)
separate_Proportiondata <- separate(long_Proportiondata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
PPS_F = summary(aov(Proportion_short ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_Proportiondata))
PPS_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(PPS_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
PPS_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`[1]/sum(PPS_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`)
PPS_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`[1]/sum(PPS_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`)
##### PSE ####
PSEdata = read.csv('/Users/t.z.cheng/Google_Drive/Research/Delaydoesmatter/real_exp/exp2/data_analysis/Rdata/PSE.csv')
long_PSEdata <- gather(PSEdata,BD,PSE,Early.Shortdelay:Late.Longdelay)
separate_PSEdata <- separate(long_PSEdata, BD, c("Comparison_onsets", "Delay_length"))
## Run repeated measure ANOVA
# main effect & interaction
PSE_F = summary(aov(PSE ~ Comparison_onsets * Delay_length + Error(subject/(Comparison_onsets * Delay_length)), data = separate_PSEdata))
PSE_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(PSE_F$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
PSE_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`[1]/sum(PSE_F$'Error: subject:Delay_length'[[1]]$`Sum Sq`)
PSE_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`[1]/sum(PSE_F$'Error: subject:Comparison_onsets:Delay_length'[[1]]$`Sum Sq`)
# Simple main effect
Acc_Short = separate_Accdata %>%
filter(Delay_length =='Shortdelay')
p1 = summary(aov(Accuracy ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = Acc_Short))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
Acc_Medium = separate_Accdata %>%
filter(Delay_length =='Mediumdelay')
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
Acc_Medium = separate_Accdata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(Accuracy ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = Acc_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
Acc_Long = separate_Accdata %>%
filter(Delay_length =='Longdelay')
p3 = summary(aov(Accuracy ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = Acc_Long))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
## Pairwise comparison for interaction effects
# Accuracy
# Short condition
p1 = t.test(Accdata$Early.Shortdelay,Accdata$Ontime.Shortdelay, paired = TRUE) # Early vs Ontime in short condition
cohen.d(Accdata$Early.Shortdelay,Accdata$Ontime.Shortdelay)
p2 = t.test(Accdata$Early.Shortdelay,Accdata$Late.Shortdelay, paired = TRUE) # Early vs Late in short condition
cohen.d(Accdata$Early.Shortdelay,Accdata$Late.Shortdelay)
p3 = t.test(Accdata$Ontime.Shortdelay,Accdata$Late.Shortdelay, paired = TRUE) # Late vs Ontime in short condition
## ttest in comparison onset (early, ontime, late)
p1 = t.test(Accdata$Early,Accdata$Ontime, paired = TRUE)
cohen.d(Accdata$Early,Accdata$Ontime)
p2 = t.test(Accdata$Early,Accdata$Late, paired = TRUE)
cohen.d(Accdata$Early,Accdata$Late)
p3 = t.test(Accdata$Late,Accdata$Ontime, paired = TRUE)
cohen.d(Accdata$Late,Accdata$Ontime)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
## ttest in delay length (short, medium, long)
p1 = t.test(Accdata$ShortDelay,Accdata$MediumDelay, paired = TRUE)
cohen.d(Accdata$ShortDelay,Accdata$MediumDelay)
p2 = t.test(Accdata$ShortDelay,Accdata$LongDelay, paired = TRUE)
cohen.d(Accdata$ShortDelay,Accdata$LongDelay)
p3 = t.test(Accdata$MediumDelay,Accdata$LongDelay, paired = TRUE)
cohen.d(Accdata$MediumDelay,Accdata$LongDelay)
p.adjust(p1[["p.value"]], method = "bonferroni", n = length(p1))
p.adjust(p2[["p.value"]], method = "bonferroni", n = length(p2))
p.adjust(p3[["p.value"]], method = "bonferroni", n = length(p3))
p1 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Short))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
PPS_Medium = separate_Proportiondata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
PPS_Long = separate_Proportiondata %>%
filter(Delay_length =='Longdelay')
p3 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Long))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p1
p1 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Short))
# Simple main effect
PPS_Short = separate_Proportiondata %>%
filter(Delay_length =='Shortdelay')
p1 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Short))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
PPS_Medium = separate_Proportiondata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
PPS_Long = separate_Proportiondata %>%
filter(Delay_length =='Longdelay')
p3 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Long))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p1
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`
# Simple main effect
PSE_Short = separate_PSEdata %>%
filter(Delay_length =='Shortdelay')
p1 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Short))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
PSE_Medium = separate_PSEdata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
PSE_Long = separate_PSEdata %>%
filter(Delay_length =='Longdelay')
p3 = summary(aov(PSE ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PSE_Long))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
PPS_F
0.8697/0.004
0.11626/0.00662
1.331/0.006
0.87/0.0040
0.8697/0.0040
2250.2/148
2250.2/148.3
2602.7/559.9
1755/246
978/246
4651/246
1754.7/737.8
978.4/409
4651/622
0.8697/0.0040
p2 = summary(aov(Accuracy ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = Acc_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
p2
p1 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Short))
p.adjust(p1$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p1))
PPS_Medium = separate_Proportiondata %>%
filter(Delay_length =='Mediumdelay')
p2 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Medium))
p.adjust(p2$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p2))
PPS_Long = separate_Proportiondata %>%
filter(Delay_length =='Longdelay')
p3 = summary(aov(Proportion_short ~ Comparison_onsets + Error(subject/(Comparison_onsets)), data = PPS_Long))
p.adjust(p3$'Error: subject:Comparison_onsets'[[1]]$'Pr(>F)'[1], method = "bonferroni", n = length(p3))
p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p1$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p2$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`[1]/sum(p3$'Error: subject:Comparison_onsets'[[1]]$`Sum Sq`)
